#!/usr/bin/env python3
"""
DEMO: An√°lisis de Tareas con Pandas
===================================

Este script demuestra c√≥mo usar las funciones de an√°lisis de tareas
para obtener insights valiosos de los datos.

Autor: Asistente IA
Fecha: 2025
"""

from analisis_tareas import *

def demo_basico():
    """
    Demostraci√≥n b√°sica: cargar datos y ejecutar an√°lisis individuales.
    """
    print("üöÄ DEMO B√ÅSICO: An√°lisis Individual de Tareas")
    print("=" * 50)
    
    # 1. Cargar datos
    print("üì• Cargando datos de tareas...")
    df = cargar_datos_tareas()
    
    if df.empty:
        print("‚ùå No hay datos disponibles. Aseg√∫rate de que el servidor est√© corriendo.")
        return
    
    print(f"‚úÖ Datos cargados: {len(df)} tareas")
    print(f"üìä Columnas disponibles: {', '.join(df.columns)}")
    
    # 2. An√°lisis temporal
    print("\n" + "="*50)
    stats_tiempo = analisis_creacion_tareas(df)
    
    # 3. An√°lisis de prioridades
    print("\n" + "="*50)
    stats_prioridad = analisis_prioridades(df)
    
    # 4. An√°lisis de duraci√≥n
    print("\n" + "="*50)
    stats_duracion = analisis_duracion(df)
    
    # 5. An√°lisis de completitud
    print("\n" + "="*50)
    stats_completitud = analisis_completitud(df)
    
    return df

def demo_avanzado():
    """
    Demostraci√≥n avanzada: an√°lisis completo con visualizaciones.
    """
    print("\nüéØ DEMO AVANZADO: An√°lisis Completo")
    print("=" * 50)
    
    # Cargar datos
    df = cargar_datos_tareas()
    
    if df.empty:
        print("‚ùå No hay datos disponibles.")
        return
    
    # Generar reporte completo
    reporte = generar_reporte_completo(df)
    
    # Crear visualizaciones
    print("\nüìä Generando visualizaciones...")
    try:
        crear_visualizaciones(df)
    except Exception as e:
        print(f"‚ö†Ô∏è Error en visualizaciones: {e}")
    
    # Exportar datos
    print("\nüíæ Exportando datos analizados...")
    exportar_analisis(df, 'demo_tareas_analizadas.csv')
    
    return df, reporte

def demo_casos_uso():
    """
    Demostraci√≥n de casos de uso espec√≠ficos.
    """
    print("\nüí° DEMO: Casos de Uso Espec√≠ficos")
    print("=" * 50)
    
    df = cargar_datos_tareas()
    
    if df.empty:
        return
    
    print("üìã CASO 1: Identificar patrones de productividad")
    print("-" * 40)
    
    # ¬øEn qu√© horario se crean m√°s tareas?
    if 'fecha_creacion' in df.columns:
        df['hora'] = df['fecha_creacion'].dt.hour
        horas_pico = df['hora'].value_counts().sort_index()
        print("üïê Horas con m√°s creaci√≥n de tareas:")
        for hora, count in horas_pico.head().items():
            print(f"   {hora}:00 - {count} tareas")
    
    print("\nüìã CASO 2: An√°lisis de eficiencia por prioridad")
    print("-" * 40)
    
    if 'prioridad' in df.columns and 'estado' in df.columns:
        eficiencia = df.groupby('prioridad')['estado'].apply(
            lambda x: (x == 'completada').mean() * 100
        ).round(1)
        print("‚úÖ Tasa de completitud por prioridad:")
        for prioridad, tasa in eficiencia.items():
            print(f"   {prioridad.capitalize()}: {tasa}%")
    
    print("\nüìã CASO 3: Predicci√≥n de retrasos")
    print("-" * 40)
    
    if 'tiempo_estimado' in df.columns and 'prioridad' in df.columns:
        tiempo_por_prioridad = df.groupby('prioridad')['tiempo_estimado'].mean().round(1)
        print("‚è±Ô∏è Tiempo promedio por prioridad (horas):")
        for prioridad, tiempo in tiempo_por_prioridad.items():
            print(f"   {prioridad.capitalize()}: {tiempo}h")
    
    print("\nüìã CASO 4: Identificar cuellos de botella")
    print("-" * 40)
    
    pendientes = df[df['estado'] == 'pendiente']
    if len(pendientes) > 0:
        print(f"‚ö†Ô∏è Tareas pendientes: {len(pendientes)}")
        if 'prioridad' in pendientes.columns:
            print("üéØ Distribuci√≥n de prioridades en pendientes:")
            dist = pendientes['prioridad'].value_counts()
            for prioridad, count in dist.items():
                print(f"   {prioridad.capitalize()}: {count}")

def demo_interactivo():
    """
    Demostraci√≥n interactiva donde el usuario puede elegir qu√© an√°lisis ejecutar.
    """
    print("\nüéÆ DEMO INTERACTIVO")
    print("=" * 50)
    
    df = cargar_datos_tareas()
    
    if df.empty:
        print("‚ùå No hay datos disponibles.")
        return
    
    opciones = {
        '1': ('An√°lisis temporal', lambda: analisis_creacion_tareas(df)),
        '2': ('An√°lisis de vencimientos', lambda: analisis_vencimientos(df)),
        '3': ('An√°lisis de prioridades', lambda: analisis_prioridades(df)),
        '4': ('An√°lisis de duraci√≥n', lambda: analisis_duracion(df)),
        '5': ('An√°lisis de completitud', lambda: analisis_completitud(df)),
        '6': ('Reporte completo', lambda: generar_reporte_completo(df)),
        '7': ('Crear visualizaciones', lambda: crear_visualizaciones(df)),
        '8': ('Exportar datos', lambda: exportar_analisis(df))
    }
    
    print("Selecciona el an√°lisis que quieres ejecutar:")
    for key, (nombre, _) in opciones.items():
        print(f"  {key}. {nombre}")
    
    # Para demo autom√°tica, ejecutamos algunas opciones
    print("\nü§ñ Ejecutando autom√°ticamente algunas opciones...")
    
    # Ejecutar an√°lisis temporal
    print("\n‚û°Ô∏è Ejecutando opci√≥n 1: An√°lisis temporal")
    opciones['1'][1]()
    
    # Ejecutar an√°lisis de prioridades
    print("\n‚û°Ô∏è Ejecutando opci√≥n 3: An√°lisis de prioridades")
    opciones['3'][1]()

def main():
    """
    Funci√≥n principal que ejecuta todas las demostraciones.
    """
    print("üéâ BIENVENIDO AL DEMO DE AN√ÅLISIS DE TAREAS")
    print("=" * 60)
    print("Este script demuestra el poder del an√°lisis de datos con Pandas")
    print("aplicado a la gesti√≥n de tareas.")
    print()
    
    try:
        # Demo b√°sico
        df = demo_basico()
        
        if df is not None and not df.empty:
            # Demo avanzado
            demo_avanzado()
            
            # Casos de uso
            demo_casos_uso()
            
            # Demo interactivo
            demo_interactivo()
            
            print("\nüéä ¬°DEMO COMPLETADO!")
            print("=" * 60)
            print("üí° PR√ìXIMOS PASOS:")
            print("   1. Modifica las funciones seg√∫n tus necesidades")
            print("   2. Agrega nuevas m√©tricas o visualizaciones")
            print("   3. Integra con sistemas de alertas o dashboards")
            print("   4. Programa ejecuciones autom√°ticas para reportes peri√≥dicos")
            print("\nüìö RECURSOS:")
            print("   - Documentaci√≥n de Pandas: https://pandas.pydata.org/docs/")
            print("   - Matplotlib para visualizaciones: https://matplotlib.org/")
            print("   - Seaborn para gr√°ficos estad√≠sticos: https://seaborn.pydata.org/")
        
    except Exception as e:
        print(f"‚ùå Error durante la demostraci√≥n: {e}")
        print("üí° Aseg√∫rate de que:")
        print("   1. El servidor Flask est√© corriendo en localhost:5000")
        print("   2. Tengas datos de tareas en la base de datos")
        print("   3. Las dependencias est√©n instaladas (pandas, requests, matplotlib, seaborn)")

if __name__ == "__main__":
    main()